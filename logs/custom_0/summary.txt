
    Executed command
    ===============
    main.py --action train --batch_size 128 --dataset_dir /mounts/Datasets1/ChallengeDeep/ --model custom --weighted_sampler True
    Dataset
    =======
    Train transform : Compose(
    Grayscale(num_output_channels=1)
    <function invert at 0x7f9facdf6048>
    Resize(size=(300, 300), interpolation=bicubic, max_size=None, antialias=None)
    RandomHorizontalFlip(p=0.5)
    RandomRotation(degrees=[0.0, 360.0], interpolation=nearest, expand=False, fill=0)
    ToTensor()
    Normalize(mean=[0.0988], std=[0.1444])
)
    Model summary
    =============
    Custom_CNN(
	  (features): Sequential(
	    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
	    (1): ReLU(inplace=True)
	    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
	    (3): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
	    (4): ReLU(inplace=True)
	    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
	    (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
	    (7): ReLU(inplace=True)
	    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
	  )
	  (classifier): Sequential(
	    (0): Dropout(p=0.5, inplace=False)
	    (1): Linear(in_features=87616, out_features=128, bias=True)
	    (2): ReLU(inplace=True)
	    (3): Dropout(p=0.5, inplace=False)
	    (4): Linear(in_features=128, out_features=256, bias=True)
	    (5): ReLU(inplace=True)
	    (6): Linear(in_features=256, out_features=86, bias=True)
	  )
	)
    11334614 trainable parameters
    Loss function
    ========
    CrossEntropyLoss()
    Optimizer
    ========
    Adam (
	Parameter Group 0
	    amsgrad: False
	    betas: (0.9, 0.999)
	    eps: 1e-08
	    lr: 0.0001
	    weight_decay: 0
	)
        